rule_id,tech,title,severity,category,rationale,detection,recommendation,kpi,estimate_savings_hint,confidence,fingerprint_keys,tags
ECO-DOCKER-001,docker,Use multi-stage builds to slim images,high,quick_win,"Single-stage images bake dev tooling and artifacts into runtime images, increasing pull time and compute.",Dockerfile lacks multiple FROM stages; build tools present in final image.,Refactor to multi-stage; copy only runtime artifacts to final stage.,image_size_mb,-40–70% image size,0.8,"file_path,line_range,base_image",Flow
ECO-DOCKER-002,docker,"Switch to smaller base image (e.g., alpine, distroless)",medium,quick_win,"Large base images waste storage, bandwidth, and cold-start time.",Base image in FROM is debian/ubuntu where alpine/distroless equivalent exists.,Use minimal base images when compatible; evaluate glibc/musl needs.,image_size_mb,-20–60% image size,0.7,"file_path,base_image",Flow
ECO-DOCKER-003,docker,.dockerignore is missing or too permissive,medium,quick_win,Unnecessary build context increases build time and cache misses.,No .dockerignore or missing patterns for node_modules/.venv/tests/docs/.git.,Add .dockerignore with common excludes; confirm context reduction.,build_context_mb,-50–95% context,0.9,"repo_root,.dockerignore_hash","Flow,Feedback"
ECO-DOCKER-004,docker,Do not run as root,low,governance,Root containers require stronger isolation and hinder multitenant efficiency.,USER not set or set to root in final stage.,Create non-root user and set USER; fix file ownerships.,non_root_percentage,≥95% workloads non-root,0.8,"file_path,line_range",Governance
ECO-DOCKER-005,docker,Consolidate RUN layers & enable caching,low,quick_win,Excess layers/cache misses enlarge images and slow builds.,Many small RUN steps; apt/apk caches not cleaned; no --no-cache.,Combine commands; use --no-cache; prune package caches.,build_time_sec,-10–30% build time,0.6,"file_path,line_numbers",Flow
ECO-DOCKER-006,docker,Pin package versions for reproducible caching,low,governance,Unpinned deps cause cache busts and inconsistent sizes.,Package managers without pinned versions in Dockerfile.,Pin versions and use lockfiles; periodic controlled bumps.,cache_hit_rate,≥85% hit rate,0.7,"file_path,package_name",Feedback
ECO-DOCKER-007,docker,Minimize layers with COPY --chown and targeted paths,low,quick_win,Copying entire contexts inflates layers and rebuild scope.,COPY . . patterns without .dockerignore; ownership fixes via separate RUN.,Copy only required directories; use --chown directly in COPY.,image_layers,-10–25% layers,0.6,"file_path,line_range",Flow
ECO-DOCKER-008,docker,Remove dev dependencies from runtime image,high,quick_win,Dev deps add size and attack surface without runtime value.,Node/Python build includes devDependencies/test tooling in final image.,Use multi-stage or pip install --no-dev; npm ci --omit=dev for prod stage.,image_size_mb,-20–50% size,0.8,"file_path,package_manager",Flow
ECO-DOCKER-009,docker,Use HEALTHCHECK wisely,low,governance,Missing healthchecks harm scheduling efficiency and autoscaling responses.,No HEALTHCHECK in long-running services.,Add lightweight HEALTHCHECK with sensible intervals/timeouts.,mean_time_to_recover,-20–40% MTTR,0.5,"file_path,line_range",Feedback
ECO-DOCKER-010,docker,Prefer COPY over ADD (except for archives/URLs),low,governance,ADD has implicit behaviors that enlarge layers unexpectedly.,ADD used for local files where COPY suffices.,Replace ADD with COPY; keep ADD for verified tar/URL needs.,image_layers,-5–10% layers,0.6,"file_path,line_no",Flow
ECO-K8S-001,kubernetes,Set CPU & memory requests/limits appropriately,critical,quick_win,Missing/misaligned requests/limits cause overcommit waste or throttling.,Containers without resources or with requests >> observed usage.,"Set requests to p95 usage, limits ~1.5–2x; monitor and tune.",cpu_request_to_usage_ratio,-20–50% CPU waste,0.85,"kind,name,container","Flow,Feedback"
ECO-K8S-002,kubernetes,Enable Horizontal Pod Autoscaler (HPA),high,deep_work,Static replicas keep idle pods during low traffic.,No HPA present for scalable services.,Add HPA based on CPU/RPS/custom metrics; verify scale-to-zero where safe.,avg_replica_hours,-20–60% replica-hours,0.75,"kind,name,namespace",Flow
ECO-K8S-003,kubernetes,Right-size log verbosity & retention,medium,governance,"Excessive logs increase I/O, storage, and costs.",High log levels in production; long retention with no lifecycle.,Reduce verbosity; add log rotation/retention policies.,log_bytes_per_day,-30–70% logs,0.7,"kind,name,container",Flow
ECO-K8S-004,kubernetes,Use lean base images for sidecars,low,quick_win,Sidecars often run 24/7; heavy images multiply waste.,Sidecars using generic heavy images.,Switch to minimal images; consolidate sidecars where feasible.,image_size_mb,-20–50% sidecar size,0.65,"kind,container,image",Flow
ECO-K8S-005,kubernetes,Evict unused initContainers and probes tuned,low,quick_win,Overly aggressive probes waste CPU/IO; unused initContainers add time.,Very short probe intervals/timeouts; initContainers doing one-off tasks repeatedly.,Tune probes; remove redundant initContainers.,probe_cpu_seconds,-10–25% CPU,0.55,"kind,name,container",Feedback
ECO-K8S-006,kubernetes,Node affinity/taints for efficient bin-packing,medium,deep_work,Poor bin-packing increases active nodes and cluster energy.,No affinity/taints leading to spread across many nodes.,Define affinity/anti-affinity to improve packing with SLOs.,node_hours,-10–30% node-hours,0.6,"namespace,deployment",Flow
ECO-TF-001,terraform,Use gp3 (or latest) over gp2 for EBS,medium,quick_win,Modern volumes provide better perf per watt and lower cost.,AWS EBS volumes on gp2.,Switch to gp3 with tuned throughput/IOPS.,ebs_gb_month,-10–20% cost/energy,0.8,"resource_type,resource_name,region",Flow
ECO-TF-002,terraform,Enable S3 lifecycle & intelligent tiering,medium,quick_win,Cold data kept in standard tier wastes energy/cost.,S3 buckets without lifecycle or tiering.,Add lifecycle rules; enable intelligent tiering where access is unpredictable.,s3_standard_gb,-30–80% std GB,0.75,"bucket_name,region",Flow
ECO-TF-003,terraform,Right-size instance types and autoscaling bounds,high,deep_work,Over-provisioned instances waste compute continuously.,ASG min/max too high; large instance families with low CPU.,Use utilization metrics to set min/max; try smaller/arm/spot where safe.,vCPU_hours,-20–50% vCPU-hrs,0.8,"asg_name,launch_template",Flow
ECO-TF-004,terraform,Shorten log retention for CloudWatch/AKS/GKE logs,low,governance,Long retention multiplies storage footprint.,Retention set to default (indefinite).,Set retention to 7–30d per compliance; export cold logs to glacier.,log_gb_month,-20–60% log GB,0.7,"resource_name,region",Flow
ECO-TF-005,terraform,Enable autoscaling on managed DBs and storage,medium,deep_work,Static allocations keep headroom always-on.,RDS/CloudSQL without autoscaling or storage autoscale.,Turn on autoscaling; monitor floor/ceiling.,db_cpu_hours,-15–40% CPU hrs,0.65,"db_identifier,engine,region",Flow
ECO-CFN-001,cloudformation,Right-size Lambda memory & architecture,medium,quick_win,Over-allocating memory wastes cost/energy; x86 vs ARM choice matters.,Functions with large memory and low duration; x86 where ARM viable.,Tune memory to p95 latency; switch to ARM/Graviton if libs allow.,ms_per_invocation,-10–40% ms,0.7,"function_name,arch,region","Flow,Feedback"
ECO-CFN-002,cloudformation,Set S3 lifecycle transitions,low,governance,Default S3 retention uses standard tier by default.,Buckets without LifecycleConfiguration.,Add transitions to IA/Glacier; delete incomplete MPU after N days.,s3_standard_gb,-30–80% std GB,0.75,"bucket_name,region",Flow
ECO-WEB-001,web,Bundle size budget exceeded,high,quick_win,Large bundles increase client energy and CDN egress.,"Detected bundle > budget (e.g., >250KB gzip).","Code split, tree-shake, remove heavy libs, defer rarely used routes.",bundle_size_kb_gzip,-20–60% bundle,0.85,"file_path,chunk_name",Flow
ECO-WEB-002,web,Unoptimized images (format/size),high,quick_win,Oversized raster images dominate transfer and decode energy.,JPEG/PNG where WebP/AVIF possible; dims >> rendered size.,"Use responsive srcset, modern formats, pre-sized images.",image_bytes,-40–90% bytes,0.9,"img_src,dimensions",Flow
ECO-WEB-003,web,Unused dependencies or polyfills,medium,quick_win,Dead weight in node_modules inflates bundles and builds.,Deps never imported; broad polyfills shipping to modern browsers.,Prune deps; use targeted polyfills and browserslist.,bundle_modules_count,-10–30% modules,0.7,"package.json,name",Flow
ECO-WEB-004,web,Client polling where events/streams suffice,medium,deep_work,Frequent polling wastes radio/CPU cycles.,Intervals <30s for endpoints supporting SSE/webhooks.,Switch to SSE/WebSockets/webhooks with backoff.,poll_requests_per_hour,-50–95% requests,0.75,"url,interval_ms",Flow
ECO-WEB-005,web,Excessive console/debug in production,low,governance,Console and verbose logging slow pages and leak info.,console.debug/trace present in prod bundles.,Strip logs during build; guard by env.,console_calls_per_page,-80–100%,0.6,"file_path,line_range",Flow
ECO-WEB-006,web,No HTTP caching headers / immutability,medium,quick_win,Lack of caching increases repeat transfer energy.,Static assets served without long-lived cache headers.,Add Cache-Control/ETag; content-hash filenames.,repeat_transfer_bytes,-40–90%,0.8,"path,header_set",Feedback
ECO-PY-001,python,Inefficient loops / avoid repeated work,medium,quick_win,Python loops with repeated computation inflate CPU time.,"Repeated regex compilation, function calls, or attribute lookups inside loops.",Hoist invariants; precompile regex; use comprehensions/vectorize.,cpu_seconds,-10–40% CPU,0.7,"file_path,line_range,pattern",Flow
ECO-PY-002,python,N+1 DB query patterns,high,deep_work,Chatty ORM access explodes DB calls and CPU/IO.,ORM calls in loops; missing select_related/prefetch_related.,Batch queries; use joins; ORM eager loading.,db_queries_per_req,-50–95% queries,0.8,"file_path,line_range,orm_model",Flow
ECO-PY-003,python,Inefficient JSON/CSV handling for large data,medium,deep_work,Loading whole files into memory increases time/energy.,json.load of large files; pandas without chunksize.,Use streaming/chunked reads; ijson; pandas chunksize.,io_bytes,-30–70% CPU/IO,0.65,"file_path,line_range",Flow
ECO-PY-004,python,Over-precision or unnecessary Decimal use,low,quick_win,High precision math is slower and energy-costly when not needed.,Decimal in hot paths without financial need; float64 where float32 OK.,Use floats/NumPy dtypes appropriate to domain.,cpu_seconds,-5–20% CPU,0.5,"file_path,line_range",Flow
ECO-PY-005,python,Unbounded caching / memory growth,medium,governance,Caches without bounds increase memory/GC and swap risk.,lru_cache with no maxsize; dict caches never pruned.,Set maxsize; periodic pruning; use TTL caches.,peak_rss_mb,-10–30% RAM,0.6,"func_name,decorator_args",Flow
ECO-PY-006,python,Inefficient logging in hot paths,low,quick_win,String formatting and IO in tight loops adds overhead.,f-strings evaluated before log level check; many debug logs.,Use lazy logging; guard by level; batch logs.,cpu_seconds,-5–15% CPU,0.6,"file_path,line_range",Flow
ECO-CI-001,ci,Redundant matrix jobs or duplicate workflows,medium,governance,Unnecessary parallel jobs multiply CI compute.,Matrix includes identical environments; overlapping triggers.,Deduplicate; conditional matrix; path filters.,ci_vcpu_minutes,-20–50% minutes,0.75,"workflow_name,job_name",Flow
ECO-CI-002,ci,Missing dependency caching,medium,quick_win,Cold builds fetch and build deps every run.,No actions/cache or equivalent; lockfiles ignored.,Add caching keyed by lockfile; cache Docker layers.,cache_hit_rate,≥85% hit rate,0.85,"workflow_name,cache_key",Feedback
ECO-CI-003,ci,Artifact retention too long,low,governance,Long-lived artifacts consume storage.,Artifacts kept >14 days without need.,Reduce retention; compress artifacts; avoid large artifacts.,artifact_gb_month,-30–80% GB,0.7,"workflow_name,artifact_name",Flow
ECO-CI-004,ci,Run tests selectively (changed paths),medium,deep_work,Running all tests on every change wastes compute.,No path-based test selection; no impacted tests.,Adopt test impact analysis or path filters; split smoke vs full.,ci_vcpu_minutes,-20–60% minutes,0.65,"workflow_name,paths_filter",Flow
ECO-ASSET-001,assets,Deduplicate identical images/fonts,low,quick_win,Duplicate assets inflate bundles and storage.,Hash-colliding assets in repo or build output.,Deduplicate; reference single copy; use asset pipeline.,asset_bytes,-10–30% bytes,0.7,"asset_hash,asset_path",Flow
ECO-ASSET-002,assets,Subsetting & compressing web fonts,medium,deep_work,Full font families add 100s of KB per page.,Multiple full fonts loaded; no unicode-range subsetting.,Subset to needed glyphs; use WOFF2; preload wisely.,font_bytes,-40–80% bytes,0.8,"css_file,font_name",Flow
ECO-ASSET-003,assets,Video autoplay or high bitrate by default,medium,governance,Autoplay and high bitrate waste client energy/data.,Autoplay enabled; >1080p on mobile; no adaptive bitrate.,Disable autoplay; use ABR; reduce default resolution.,video_bytes,-30–70% bytes,0.7,"html_tag,src,attributes",Flow
ECO-DB-001,database,Indexes missing on hot queries,high,deep_work,Table scans increase CPU/IO and latency.,Slow query patterns lacking supporting indexes.,Add composite indexes; verify via EXPLAIN/ANALYZE.,cpu_seconds_per_query,-30–90% CPU,0.8,"table_name,query_fingerprint",Flow
ECO-DB-002,database,Excessive data retention without policy,medium,governance,Old rows and blobs increase storage/backup energy.,Tables without TTL/archival policy; ever-growing blobs.,Add retention; tier cold data; purge safely.,storage_gb_month,-20–60% GB,0.7,"table_name,age_days",Flow
ECO-DB-003,database,Inefficient serialization (JSON blobs for hot paths),low,deep_work,JSON blobs force parse/scan vs structured columns.,Frequent JSON_EXTRACT on hot path fields.,Normalize columns or add generated columns with indexes.,cpu_seconds_per_query,-10–40% CPU,0.6,"table_name,column_name",Flow
ECO-GOV-001,governance,No baseline/delta tracking enabled,low,governance,"Without baselines, improvements aren’t measured or celebrated.",Missing .eco-audit baseline files.,Capture baseline on first run; compare on PRs and sprints.,improvement_rate,≥20% reduction in 60 days,0.9,"repo_root,baseline_hash",Learning
ECO-GOV-002,governance,Missing playbooks linked from rules,low,governance,Lack of repeatable fixes slows adoption and learning.,Rules without documented fix steps/playbooks.,Author concise playbooks; link from SARIF help.,time_to_fix_days,-20–40% TTF,0.6,"rule_id,playbook_url",Learning
